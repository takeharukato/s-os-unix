THIS FILE IS WRITTEN IN JAPANESE AND CODED IN MS-KANJI CODE

* 各モジュールは以下の内容です。
・simz80	Z80 エミュレータ (yaze より)
・sos		SOS メインルーチン
・dio		DISK I/O ルーチン
・screen	コンソールコントロール
・trap		IOCS コール管理
・util		ユーティリティ関数群
・compat	システムに不足する関数群
・keymap	デフォルトのキーマップの定義

  全てのモジュールは UNIX を想定して記述されりますが、dio.c と 
screen.c 以外はそれほど UNIX に依存していません。基本的に外部から利用
される関数及びに参照される変数はヘッダファイルに記されています。

・simz80	Z80 エミュレータ (yaze より)
  yaze のコードほぼそのままです。simz80() という関数を呼ぶと HALT 命令
に会うまで Z80 のコードを実行し、HALT 命令の Z80的番地を返します。
それと yaze.h の中には Z80 のレジスタやメモリにアクセスする為のマクロ
が多く用意されています。

・sos		SOS メインルーチン
  main() が含まれ、各モジュール の初期化とエミュレーション実行の制御を
行なっています。また、機種依存モニタもここに含まれ、起動時の .sosrc の
解釈と同じルーチンを使っています。

・dio		DISK I/O ルーチン
  DISK I/O には、disk image file を扱う関数群と、UNIX ファイルシステム
上のファイルを扱う関数群があります。性能を向上させるため、disk image
file は一度 open されると、明示的に close するまで open したままになっ
ています。
  UNIX ファイルシステムへのアクセス時には、1行(18byte)のヘッダを付加し
ます。ここには、SOS のファイルであることを表す "_SOS" の文字と、ファイ
ルタイプ、開始アドレス、実行アドレスがテキストで記述されます。ファイル
サイズは UNIX ファイルのファイルサイズから算出しています。これは、UNIX 
側で編集された場合でも正しいファイルサイズを得られるようにするためです。
  ファイルがテキストファイルの際には、UNIX の改行コードである 0x0a の
文字を、SWORD の改行文字である 0x0d と変換しています。さらに、SWORD の
テキストファイルは 0x00 で終了しないといけないために、強制的に 0x00 を
付加/削除することも行なっています。行末コードが 0x0a 0x0d の 2byte の 
OS では、open 時にテキストファイルのファイル長を求めるコードに細工が必
要でしょう。

・screen	コンソールコントロール
  コンソールへの入出力を行なっています。最も OS への依存性が高いモジュー
ルでもあります。内部に仮想画面を持ち、原則として SOS の画面描画システ
ムコール毎に実画面への反映を行なっています。実画面上でのスクリーンコン
トロールには termcap のデータを用いていますが、termcap から情報が得ら
れない場合には ANSI-C で定義された特殊キャラクタを用いる場合もあります。
  キーボード入力はリアルタイム入力と BREAK キー以外は BLOCKING モード
を、それ以外は NON-BLOCKING モードを用いて行なっています。termios によ
る c_cc[VMIN] を 0 にするだけではリアルタイム入力にならない OS がある
ため、fcntl() の O_NONBLOCK を併用しています。
  BREAK キーに関しては、SIGINT を C-c とみなし、flag を用意して割り込
みが入ると flag を on にし、キーバッファを消去し、キーバッファに BREAK 
コードを挿入します。これにより、scr_brkey() で他の文字を読むことなく 
BREAK キーが押されたかの判断をしています。さらに、scr_getky() で break
flag が立っていない状態で BREAK コードが読まれた場合には ESC が押され
たと認識して flag を立てます。この扱いは SOS の BRKEY システムコールを
呼ばないアプリケーションが動作した時に多少の問題を生じる可能性がありま
す。
  仮想画面管理部と実画面制御部を分離すれば、可搬性が増しますが、分離は
今後の課題となっています。

・trap		IOCS コール管理
  IOCS というか SWORD のシステムコールを実装しています。HALT 命令の次
のバイトを読み、これを sos_funcs[] の index 番号として各ルーチンに分岐
しています。
  sos_funcs[] には、処理を行なう関数へのポインタ、そのシステムコールの
番地、もし関数を呼ぶかわりに Z80 の別サブルーチンに分岐するならそのア
ドレスが入ります。例えば COLD は sos_cold() が処理関数であり、Z80 の 
1FFDH 番地がそのシステムコールの番地です。この場合は 1FFDH から 
HALT(76H), 00H, RET(C9H) が配置されます。つまり、index 番号 00 の関数 
sos_cold() が呼ばれた後に RET するわけです。
  通常のシステムコールの他に、内部の全機種共通 DOS モジュールから呼び
出される関数も実装しています。
  trap_init() が Z80 メモリ上にこれらのシステムコールのコードを配置し
ます。

・util		ユーティリティ関数群
  各モジュールから呼び出せるユーティリティ関数群です。現在は Z80 のス
タックへの push と pop が含まれています。

・compat	システムに不足する関数群
  システム内で不足する関数を実装します。POSIX + BSD システムでは空にな
ります。

・keymap	デフォルトのキーマップの定義
  デフォルトで用いられるコントロールキーの定義です。
--
1999年 3月 6日
楯岡 孝道 (tate@spa.is.uec.ac.jp)
